# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HISTORICO.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
import BANCO_TABLE
import NOMES_SYSTEM
import MENSAGEM_CAIXA


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(728, 476)
        MainWindow.showMaximized()
        MainWindow.setWindowIcon(QtGui.QIcon("images/moed.png"))
        MainWindow.setIconSize(QtCore.QSize(55, 49))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 80, 641, 391))
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setGridStyle(QtCore.Qt.SolidLine)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tableWidget.setColumnCount(34)
        self.tableWidget.setStyleSheet("selection-color: rgb(255, 255, 255); selection-background-color: rgb(0, 0, 255);")
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setSortIndicatorShown(False)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.verticalHeader().setCascadingSectionResizes(True)
        self.tableWidget.verticalHeader().setStretchLastSection(False)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.tableWidget.setFont(font)
        self.tableWidget.setHorizontalHeaderLabels(("Id_Crypto", "Símbolo Moeda", "Slug", "Valor US$", "Valor R$", "Fornecimento Circulante", "Ranking Top", "Data de Criação",
                                                    "Está Ativo?", "É Fiduciário?", "Última Atualização", "Suprimento Máximo", "Número de Pares de Mercado", "Valor de Mercado Totalmente Diluído",
                                                    "Última Cotação Atualização", "Valor de Mercado", "Dominância de Capitalização de Mercado", "Percentual de Mudança em 1H", "Percentual de Mudança em 24H",
                                                    "Percentual de Mudança em 30 Dias", "Percentual de Mudança em 60 Dias", "Percentual de Mudança em 7 Dias","Percentual de Mudanças em 90 Dias", "Preço", "Volume 24h", "Volume de Alteração em 24H",
                                                    "Nome Completo", "Símbolo", "Fornecimento Total", "Quantidade de Compra", "Preço de Compra", "Data de Compra", "Cotação da Compra", "Seq"))
        self.gridLayout.addWidget(self.tableWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBar_2 = QtWidgets.QToolBar(MainWindow)
        self.toolBar_2.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.toolBar_2.setObjectName("toolBar_2")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_2)
        self.actionExcluir_Del = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/excluir.png"))
        self.actionExcluir_Del.setIcon(icon)
        self.actionExcluir_Del.setObjectName("actionExcluir_Del")
        self.actionRelat_rio_F1 = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/relatorio.png"))
        self.actionRelat_rio_F1.setIcon(icon1)
        self.actionRelat_rio_F1.setObjectName("actionRelat_rio_F1")
        self.actionExcluir = QtWidgets.QAction(MainWindow)
        self.actionExcluir.setIcon(icon)
        self.actionExcluir.setObjectName("actionExcluir")
        self.actionRelat_rio = QtWidgets.QAction(MainWindow)
        self.actionRelat_rio.setIcon(icon1)
        self.actionRelat_rio.setObjectName("actionRelat_rio")
        self.actionVoltar_Esc = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/seta_sair.png"))
        self.actionVoltar_Esc.setIcon(icon2)
        self.actionVoltar_Esc.setObjectName("actionVoltar_Esc")
        self.toolBar.addAction(self.actionExcluir)
        self.toolBar.addAction(self.actionRelat_rio)
        self.toolBar.addSeparator()
        self.toolBar_2.addAction(self.actionVoltar_Esc)

        # CONEXÃO EXCLUIR
        self.actionExcluir.triggered.connect(self.excluir_cpt)

        # CONEXÃO SAIR
        self.actionVoltar_Esc.triggered.connect(MainWindow.close)

        self.actua()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Histórico"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.toolBar_2.setWindowTitle(_translate("MainWindow", "toolBar_2"))
        self.actionExcluir_Del.setText(_translate("MainWindow", "Excluir [Del]"))
        self.actionExcluir_Del.setStatusTip(_translate("MainWindow", "Excluir Registro"))
        self.actionExcluir_Del.setShortcut(_translate("MainWindow", "Del"))
        self.actionRelat_rio_F1.setText(_translate("MainWindow", "Relatório [F1]"))
        self.actionRelat_rio_F1.setStatusTip(_translate("MainWindow", "Gerar Relatório"))
        self.actionRelat_rio_F1.setShortcut(_translate("MainWindow", "F1"))
        self.actionExcluir.setText(_translate("MainWindow", "Excluir [Del]"))
        self.actionExcluir.setStatusTip(_translate("MainWindow", "Excluir Registro"))
        self.actionExcluir.setShortcut(_translate("MainWindow", "Del"))
        self.actionRelat_rio.setText(_translate("MainWindow", "Relatório [F1]"))
        self.actionVoltar_Esc.setText(_translate("MainWindow", "Voltar [Esc]"))
        self.actionVoltar_Esc.setStatusTip(_translate("MainWindow", "Voltar Tela"))
        self.actionVoltar_Esc.setShortcut(_translate("MainWindow", "Esc"))

    def excluir_cpt(self):
        try:
            linha = self.tableWidget.currentRow()
            itens = self.tableWidget.selectedItems()
            cod_moed = itens[33].text()
            nome_moed = itens[2].text()

            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("Deletar Cripto Moeda")
            msg.setWindowIcon(QtGui.QIcon("images/moed.png"))
            msg.setText(f'Deseja Deletar "{nome_moed}" da Sua Base de Dados')
            msg.setIcon(QtWidgets.QMessageBox.Question)
            msg.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
            button_sim = msg.button(QtWidgets.QMessageBox.Yes)
            button_sim.setIcon(QtGui.QIcon("images/sim.png"))
            button_sim.setText('Sim')
            button_nao = msg.button(QtWidgets.QMessageBox.No)
            button_nao.setIcon(QtGui.QIcon("images/nao.png"))
            button_nao.setText("Não")
            resp = msg.exec_()

            if resp == QtWidgets.QMessageBox.Yes:
                try:
                    conn = sqlite3.connect(BANCO_TABLE.banco)
                    c = conn.cursor()
                    c.execute(f"DELETE FROM historic_cripto_moed WHERE cod = '{cod_moed}'")
                    conn.commit()
                    conn.close()
                    self.tableWidget.removeRow(linha)
                    self.actua()
                except Exception as ERROR:
                    print(ERROR)
                    MENSAGEM_CAIXA.MessageBoxs.warning(self, f'{NOMES_SYSTEM.aviso_erro}', f'Não Foi Possível Deletar a Cripto Moeda\n{ERROR}')
            else:
                return None
        except Exception as ERROR:
            print(ERROR)
            MENSAGEM_CAIXA.MessageBoxs.warning(self, f'{NOMES_SYSTEM.aviso_erro}', 'Selecione o Registro!')

    def actua(self):
        try:
            conn = sqlite3.connect(BANCO_TABLE.banco)
            c = conn.cursor()
            c.execute("SELECT id_crypto, nome, slug, valor_us, valor_rs, circulating_supply, cmc_rank, date_added, is_active, is_fiat,"
                     "last_update, max_supply, num_market_pairs, fully_diluted_market_cap, quote_last_updated, market_cap, market_cap_dominance,"
                     "percent_change_1h, percent_change_24h, percent_change_30d, percent_change_60d, percent_change_7d, percent_change_90d, price,"
                     "volume_24h, volume_change_24h, name, symbol, total_supply, quant_compra, preco_compra, data_hora_compra, cotacao_compra, cod FROM historic_cripto_moed")
            dados_lidos = c.fetchall()
            self.tableWidget.setRowCount(len(dados_lidos))
            self.tableWidget.resizeColumnToContents(0)
            self.tableWidget.setColumnCount(34)
            for i in range(0, len(dados_lidos)):
                for j in range(0, 34):
                    item = QtWidgets.QTableWidgetItem(str(dados_lidos[i][j]))
                    if j == 0:
                        item.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
                    if j > 2:
                        item.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
                    self.tableWidget.setItem(i, j, item)
            conn.close()

            header = self.tableWidget.horizontalHeader()
            header.setSectionResizeMode(0, 120)
            header.setSectionResizeMode(1, 120)
            header.setSectionResizeMode(2, 120)
            header.setSectionResizeMode(3, 120)
            header.setSectionResizeMode(4, 120)
            header.setSectionResizeMode(5, 120)
            header.setSectionResizeMode(6, 120)
            header.setSectionResizeMode(7, 120)
            header.setSectionResizeMode(8, 120)
            header.setSectionResizeMode(9, 120)
            header.setSectionResizeMode(10, 120)
            header.setSectionResizeMode(11, 120)
            header.setSectionResizeMode(12, 120)
            header.setSectionResizeMode(13, 120)
            header.setSectionResizeMode(14, 120)
            header.setSectionResizeMode(15, 120)
            header.setSectionResizeMode(16, 120)
            header.setSectionResizeMode(17, 120)
            header.setSectionResizeMode(18, 120)
            header.setSectionResizeMode(19, 120)
            header.setSectionResizeMode(20, 120)
            header.setSectionResizeMode(21, 120)
            header.setSectionResizeMode(22, 120)
            header.setSectionResizeMode(23, 120)
            header.setSectionResizeMode(24, 120)
            header.setSectionResizeMode(25, 120)
            header.setSectionResizeMode(26, 120)
            header.setSectionResizeMode(27, 120)
            header.setSectionResizeMode(28, 120)
            header.setSectionResizeMode(29, 120)
            header.setSectionResizeMode(30, 120)
            header.setSectionResizeMode(31, 120)
            header.setSectionResizeMode(32, 120)
            header.setSectionResizeMode(33, 120)

        except Exception as ERROR:
            print(ERROR)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
